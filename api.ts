/* tslint:disable */
/* eslint-disable */
/**
 * inventory Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface InventoryAdjustQtyCommittedRequest
 */
export interface InventoryAdjustQtyCommittedRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryAdjustQtyCommittedRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryAdjustQtyCommittedRequest
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryAdjustQtyCommittedRequest
     */
    'qtyAdjust'?: number;
}
/**
 * 
 * @export
 * @interface InventoryAdjustQtyRequest
 */
export interface InventoryAdjustQtyRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryAdjustQtyRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryAdjustQtyRequest
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryAdjustQtyRequest
     */
    'qtyAdjust'?: number;
}
/**
 * 
 * @export
 * @interface InventoryCreateStockItemRequest
 */
export interface InventoryCreateStockItemRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryCreateStockItemRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryCreateStockItemRequest
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryCreateStockItemRequest
     */
    'outOfStockThreshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryCreateStockItemRequest
     */
    'qty'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryCreateStockItemRequest
     */
    'qtyCommitted'?: number;
}
/**
 * 
 * @export
 * @interface InventoryGetQtySalableRequest
 */
export interface InventoryGetQtySalableRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryGetQtySalableRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryGetQtySalableRequest
     */
    'sku'?: string;
}
/**
 * 
 * @export
 * @interface InventoryGetQtySalableResponse
 */
export interface InventoryGetQtySalableResponse {
    /**
     * 
     * @type {string}
     * @memberof InventoryGetQtySalableResponse
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryGetQtySalableResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryGetQtySalableResponse
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryGetQtySalableResponse
     */
    'qtySalable'?: number;
}
/**
 * 
 * @export
 * @interface InventoryGetStockItemRequest
 */
export interface InventoryGetStockItemRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryGetStockItemRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryGetStockItemRequest
     */
    'sku'?: string;
}
/**
 * 
 * @export
 * @interface InventoryListStockItemsBySkusRequest
 */
export interface InventoryListStockItemsBySkusRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryListStockItemsBySkusRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InventoryListStockItemsBySkusRequest
     */
    'skus'?: Array<string>;
}
/**
 * 
 * @export
 * @interface InventoryListStockItemsBySkusResponse
 */
export interface InventoryListStockItemsBySkusResponse {
    /**
     * 
     * @type {Array<InventoryStockItem>}
     * @memberof InventoryListStockItemsBySkusResponse
     */
    'stockItems'?: Array<InventoryStockItem>;
}
/**
 * 
 * @export
 * @interface InventoryListStockItemsRequest
 */
export interface InventoryListStockItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryListStockItemsRequest
     */
    'tenantId'?: string;
    /**
     * The maximum number of items to return.
     * @type {number}
     * @memberof InventoryListStockItemsRequest
     */
    'pageSize'?: number;
    /**
     * The next_page_token value returned from a previous List request, if any.
     * @type {string}
     * @memberof InventoryListStockItemsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface InventoryListStockItemsResponse
 */
export interface InventoryListStockItemsResponse {
    /**
     * 
     * @type {Array<InventoryStockItem>}
     * @memberof InventoryListStockItemsResponse
     */
    'stockItems'?: Array<InventoryStockItem>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof InventoryListStockItemsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface InventoryRebalanceStockQtysRequest
 */
export interface InventoryRebalanceStockQtysRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryRebalanceStockQtysRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryRebalanceStockQtysRequest
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryRebalanceStockQtysRequest
     */
    'qtyCommitted'?: number;
}
/**
 * 
 * @export
 * @interface InventoryStockItem
 */
export interface InventoryStockItem {
    /**
     * 
     * @type {string}
     * @memberof InventoryStockItem
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryStockItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryStockItem
     */
    'sku'?: string;
    /**
     * 
     * @type {number}
     * @memberof InventoryStockItem
     */
    'outOfStockThreshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryStockItem
     */
    'qty'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryStockItem
     */
    'qtyCommitted'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryStockItem
     */
    'qtySalable'?: number;
    /**
     * 
     * @type {string}
     * @memberof InventoryStockItem
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryStockItem
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface InventoryUpdateStockItemRequest
 */
export interface InventoryUpdateStockItemRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryUpdateStockItemRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryUpdateStockItemRequest
     */
    'sku'?: string;
    /**
     * 
     * @type {UpdateStockItemRequestPayload}
     * @memberof InventoryUpdateStockItemRequest
     */
    'payload'?: UpdateStockItemRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof InventoryUpdateStockItemRequest
     */
    'payloadMask'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface UpdateStockItemRequestPayload
 */
export interface UpdateStockItemRequestPayload {
    /**
     * 
     * @type {number}
     * @memberof UpdateStockItemRequestPayload
     */
    'outOfStockThreshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateStockItemRequestPayload
     */
    'qty'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateStockItemRequestPayload
     */
    'qtyCommitted'?: number;
}

/**
 * InventoryApi - axios parameter creator
 * @export
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Increment or decrement the quantity
         * @summary Adjust Quantity
         * @param {InventoryAdjustQtyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustQty: async (body: InventoryAdjustQtyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adjustQty', 'body', body)
            const localVarPath = `/inventory.Inventory/AdjustQty`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Increment or decrement the quantity committed
         * @summary Adjust Quantity Committed
         * @param {InventoryAdjustQtyCommittedRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustQtyCommitted: async (body: InventoryAdjustQtyCommittedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adjustQtyCommitted', 'body', body)
            const localVarPath = `/inventory.Inventory/AdjustQtyCommitted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Stock Item
         * @param {InventoryCreateStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStockItem: async (body: InventoryCreateStockItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createStockItem', 'body', body)
            const localVarPath = `/inventory.Inventory/CreateStockItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Salable Quantity
         * @param {InventoryGetQtySalableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQtySalable: async (body: InventoryGetQtySalableRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getQtySalable', 'body', body)
            const localVarPath = `/inventory.Inventory/GetQtySalable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Stock Item
         * @param {InventoryGetStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockItem: async (body: InventoryGetStockItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getStockItem', 'body', body)
            const localVarPath = `/inventory.Inventory/GetStockItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Stock Items
         * @param {InventoryListStockItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStockItems: async (body: InventoryListStockItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listStockItems', 'body', body)
            const localVarPath = `/inventory.Inventory/ListStockItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Stock Items by SKUs
         * @param {InventoryListStockItemsBySkusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStockItemsBySkus: async (body: InventoryListStockItemsBySkusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listStockItemsBySkus', 'body', body)
            const localVarPath = `/inventory.Inventory/ListStockItemsBySkus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rebalance Stock Quantities
         * @param {InventoryRebalanceStockQtysRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebalanceStockQtys: async (body: InventoryRebalanceStockQtysRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rebalanceStockQtys', 'body', body)
            const localVarPath = `/inventory.Inventory/RebalanceStockQtys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Stock Item
         * @param {InventoryUpdateStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStockItem: async (body: InventoryUpdateStockItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateStockItem', 'body', body)
            const localVarPath = `/inventory.Inventory/UpdateStockItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 * @export
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InventoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Increment or decrement the quantity
         * @summary Adjust Quantity
         * @param {InventoryAdjustQtyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adjustQty(body: InventoryAdjustQtyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryStockItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adjustQty(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.adjustQty']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Increment or decrement the quantity committed
         * @summary Adjust Quantity Committed
         * @param {InventoryAdjustQtyCommittedRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adjustQtyCommitted(body: InventoryAdjustQtyCommittedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryStockItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adjustQtyCommitted(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.adjustQtyCommitted']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Stock Item
         * @param {InventoryCreateStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStockItem(body: InventoryCreateStockItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryStockItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStockItem(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.createStockItem']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Salable Quantity
         * @param {InventoryGetQtySalableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQtySalable(body: InventoryGetQtySalableRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryGetQtySalableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQtySalable(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.getQtySalable']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Stock Item
         * @param {InventoryGetStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStockItem(body: InventoryGetStockItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryStockItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStockItem(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.getStockItem']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Stock Items
         * @param {InventoryListStockItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStockItems(body: InventoryListStockItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListStockItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStockItems(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.listStockItems']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Stock Items by SKUs
         * @param {InventoryListStockItemsBySkusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStockItemsBySkus(body: InventoryListStockItemsBySkusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListStockItemsBySkusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStockItemsBySkus(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.listStockItemsBySkus']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Rebalance Stock Quantities
         * @param {InventoryRebalanceStockQtysRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rebalanceStockQtys(body: InventoryRebalanceStockQtysRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryStockItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rebalanceStockQtys(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.rebalanceStockQtys']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Stock Item
         * @param {InventoryUpdateStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStockItem(body: InventoryUpdateStockItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryStockItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStockItem(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InventoryApi.updateStockItem']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InventoryApi - factory interface
 * @export
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InventoryApiFp(configuration)
    return {
        /**
         * Increment or decrement the quantity
         * @summary Adjust Quantity
         * @param {InventoryAdjustQtyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustQty(body: InventoryAdjustQtyRequest, options?: any): AxiosPromise<InventoryStockItem> {
            return localVarFp.adjustQty(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Increment or decrement the quantity committed
         * @summary Adjust Quantity Committed
         * @param {InventoryAdjustQtyCommittedRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustQtyCommitted(body: InventoryAdjustQtyCommittedRequest, options?: any): AxiosPromise<InventoryStockItem> {
            return localVarFp.adjustQtyCommitted(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Stock Item
         * @param {InventoryCreateStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStockItem(body: InventoryCreateStockItemRequest, options?: any): AxiosPromise<InventoryStockItem> {
            return localVarFp.createStockItem(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Salable Quantity
         * @param {InventoryGetQtySalableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQtySalable(body: InventoryGetQtySalableRequest, options?: any): AxiosPromise<InventoryGetQtySalableResponse> {
            return localVarFp.getQtySalable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Stock Item
         * @param {InventoryGetStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockItem(body: InventoryGetStockItemRequest, options?: any): AxiosPromise<InventoryStockItem> {
            return localVarFp.getStockItem(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Stock Items
         * @param {InventoryListStockItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStockItems(body: InventoryListStockItemsRequest, options?: any): AxiosPromise<InventoryListStockItemsResponse> {
            return localVarFp.listStockItems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Stock Items by SKUs
         * @param {InventoryListStockItemsBySkusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStockItemsBySkus(body: InventoryListStockItemsBySkusRequest, options?: any): AxiosPromise<InventoryListStockItemsBySkusResponse> {
            return localVarFp.listStockItemsBySkus(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rebalance Stock Quantities
         * @param {InventoryRebalanceStockQtysRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebalanceStockQtys(body: InventoryRebalanceStockQtysRequest, options?: any): AxiosPromise<InventoryStockItem> {
            return localVarFp.rebalanceStockQtys(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Stock Item
         * @param {InventoryUpdateStockItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStockItem(body: InventoryUpdateStockItemRequest, options?: any): AxiosPromise<InventoryStockItem> {
            return localVarFp.updateStockItem(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export class InventoryApi extends BaseAPI {
    /**
     * Increment or decrement the quantity
     * @summary Adjust Quantity
     * @param {InventoryAdjustQtyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public adjustQty(body: InventoryAdjustQtyRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).adjustQty(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Increment or decrement the quantity committed
     * @summary Adjust Quantity Committed
     * @param {InventoryAdjustQtyCommittedRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public adjustQtyCommitted(body: InventoryAdjustQtyCommittedRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).adjustQtyCommitted(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Stock Item
     * @param {InventoryCreateStockItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public createStockItem(body: InventoryCreateStockItemRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).createStockItem(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Salable Quantity
     * @param {InventoryGetQtySalableRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public getQtySalable(body: InventoryGetQtySalableRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).getQtySalable(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Stock Item
     * @param {InventoryGetStockItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public getStockItem(body: InventoryGetStockItemRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).getStockItem(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Stock Items
     * @param {InventoryListStockItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public listStockItems(body: InventoryListStockItemsRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).listStockItems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Stock Items by SKUs
     * @param {InventoryListStockItemsBySkusRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public listStockItemsBySkus(body: InventoryListStockItemsBySkusRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).listStockItemsBySkus(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rebalance Stock Quantities
     * @param {InventoryRebalanceStockQtysRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public rebalanceStockQtys(body: InventoryRebalanceStockQtysRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).rebalanceStockQtys(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Stock Item
     * @param {InventoryUpdateStockItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public updateStockItem(body: InventoryUpdateStockItemRequest, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).updateStockItem(body, options).then((request) => request(this.axios, this.basePath));
    }
}



